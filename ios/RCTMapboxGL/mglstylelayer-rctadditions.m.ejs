<%
  const layers = locals.layers;

  function camelize (str) {
    return str.replace(/-(.)/g, function (_, x) {
      return x.toUpperCase();
    });
  }

  function upperCamelize (str) {
    return str.replace(/(?:^|-)(.)/g, function (_, x) {
      return x.toUpperCase();
    });
  }

  const compFilterNames = ['==', '!=', '<', '<=', '>', '>=']
-%>
//
// Copyright (c) 2016 Mapbox. All rights reserved.
//
// This file is generated. See scripts/generate-layer-factory.js

#import "MGLStyleLayer+RCTAdditions.h"
#import "UIColor+RCTAdditions.h"


@implementation MGLStyleLayer (RCTAdditions)

+ (MGLStyleLayer *)fromJson:(nonnull NSDictionary *)layerJson
                   withMap:(RCTMapboxGL *)mapView
{
    NSString *idString = layerJson[@"id"];
    NSString *typeString = layerJson[@"type"];
    // if (!idString || !typeString) {
    //     return;
    // }
<% for (const layer of layers) { -%>
    if([typeString isEqualToString:@"<%- layer.type %>"]) {
        NSDictionary *paintProperties = layerJson[@"paint"];
<% if (layer.layoutProperties.length) { -%>
        NSDictionary *layoutProperties = layerJson[@"layout"];
<% } -%>
<% if (layer.type === 'background') { -%>
        MGL<%- upperCamelize(layer.type) %>StyleLayer *layer = [[MGL<%- upperCamelize(layer.type) %>StyleLayer alloc] initWithIdentifier:idString];
<% } else { -%>
        NSString *sourceString = layerJson[@"source"];
        MGLSource *source = [mapView styleSourceWithIdentifier:sourceString];
        MGL<%- upperCamelize(layer.type) %>StyleLayer *layer = [[MGL<%- upperCamelize(layer.type) %>StyleLayer alloc] initWithIdentifier:idString source:source];
<% } -%>
<% for (const prop of layer.properties) { -%>
        if ([<%- prop.propertyType %>Properties valueForKey:@"<%- prop.name %>"]) {
<% if (prop['zoom-function'] === true) { -%>
            if ([[<%- prop.propertyType %>Properties valueForKey:@"<%- prop.name %>"] isKindOfClass:[NSDictionary class]]) {
                NSArray *stops = <%- prop.propertyType %>Properties[@"<%- prop.name %>"][@"stops"];
                NSMutableDictionary *stopsDict = [[NSMutableDictionary alloc] init];
                for (id stop in stops) {
<% if (prop.type === 'color') { -%>
                    [stopsDict setObject:[MGLStyleValue valueWithRawValue:[UIColor colorFromHexString:stop[1]]] forKey:stop[0]];
<% } else { -%>
                    [stopsDict setObject:[MGLStyleValue valueWithRawValue:stop[1]] forKey:stop[0]];
<% } -%>
                }
                MGLStyleValue *<%- camelize(prop.name) %>Value;
                NSNumber *baseNumber = <%- prop.propertyType %>Properties[@"<%- prop.name %>"][@"base"];
                if (baseNumber) {
                    <%- camelize(prop.name) %>Value = [MGLStyleValue valueWithInterpolationBase:[baseNumber floatValue] stops:stopsDict];
                } else {
                    <%- camelize(prop.name) %>Value = [MGLStyleValue valueWithStops:stopsDict];
                }
                [layer set<%- upperCamelize(prop.setterName || prop.name) %>:<%- camelize(prop.name) %>Value];
            } else {
<% } -%>
<% if (prop.type === 'color') { -%>
                UIColor *color = [UIColor colorFromHexString:<%- prop.propertyType %>Properties[@"<%- prop.name %>"]];
                MGLStyleValue *<%- camelize(prop.name) %>Value = [MGLStyleValue valueWithRawValue:color];
<% } else { -%>
                MGLStyleValue *<%- camelize(prop.name) %>Value = [MGLStyleValue valueWithRawValue:<%- prop.propertyType %>Properties[@"<%- prop.name %>"]];
<% } -%>
                [layer set<%- upperCamelize(prop.setterName || prop.name) %>:<%- camelize(prop.name) %>Value];
<% if (prop['zoom-function'] === true) { -%>
            }
<% } -%>
        }
<% } -%>
<% if (layer.type !== 'background' && layer.type !== 'raster') { -%>
        NSString *sourceLayer = layerJson[@"source-layer"];
        NSArray *filter = layerJson[@"filter"];

        if (sourceLayer) {
            [layer setSourceLayerIdentifier:sourceLayer];
        }
        if (filter) {
            [layer setPredicateFromJson:filter];
        }
<% } -%>
        return layer;
    }
<% } -%>
    return nil;
}

- (NSPredicate *)setPredicateFromJson:(nonnull NSArray *)filterJson
{
    NSString *filterType = filterJson[0];
<% for (const filterName of compFilterNames) { -%>
    if ([filterType isEqualToString:@"<%- filterName %>"]) {
        return [NSPredicate predicateWithFormat:@"%K <%- filterName %> %@", filterJson[1], filterJson[2]];
    }
<% } -%>
    if ([filterType isEqualToString:@"has"]) {
        return [NSPredicate predicateWithFormat:@"%K == %@", filterJson[1], nil];
    }
    if ([filterType isEqualToString:@"!has"]) {
        return [NSPredicate predicateWithFormat:@"%K != %@", filterJson[1], nil];
    }
    if ([filterType isEqualToString:@"in"]) {
        NSMutableArray *elementsArray = [NSMutableArray arrayWithArray:filterJson];
        [elementsArray removeObjectAtIndex:0];
        [elementsArray removeObjectAtIndex:0];
        return [NSPredicate predicateWithFormat:@"%K IN %@", filterJson[1], elementsArray];
    }
    if ([filterType isEqualToString:@"!in"]) {
        NSMutableArray *elementsArray = [NSMutableArray arrayWithArray:filterJson];
        [elementsArray removeObjectAtIndex:0];
        [elementsArray removeObjectAtIndex:0];
        return [NSPredicate predicateWithFormat:@"%K !IN %@", filterJson[1], elementsArray];
    }
    if ([filterType isEqualToString:@"all"]) {
        NSMutableArray *filters = [NSMutableArray arrayWithArray:filterJson];
        [filters removeObjectAtIndex:0];
        NSMutableArray *predicates = [NSMutableArray arrayWithCapacity:[filters count]];
        for (id filter in filters) {
            [predicates addObject:[self setPredicateFromJson:filter]];
        }
        return [NSCompoundPredicate andPredicateWithSubpredicates:predicates];
    }
    if ([filterType isEqualToString:@"any"]) {
        NSMutableArray *filters = [NSMutableArray arrayWithArray:filterJson];
        [filters removeObjectAtIndex:0];
        NSMutableArray *predicates = [NSMutableArray arrayWithCapacity:[filters count]];
        for (id filter in filters) {
            [predicates addObject:[self setPredicateFromJson:filter]];
        }
        return [NSCompoundPredicate orPredicateWithSubpredicates:predicates];
    }
    if ([filterType isEqualToString:@"none"]) {
        NSMutableArray *filters = [NSMutableArray arrayWithArray:filterJson];
        [filters removeObjectAtIndex:0];
        NSMutableArray *predicates = [NSMutableArray arrayWithCapacity:[filters count]];
        for (id filter in filters) {
            [predicates addObject:[NSCompoundPredicate notPredicateWithSubpredicate:[self setPredicateFromJson:filter]]];
        }
        return [NSCompoundPredicate andPredicateWithSubpredicates:predicates];
    }
    return nil;
}

@end
